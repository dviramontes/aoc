# Day 3

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Input

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiIzIiwic2Vzc2lvbl9zZWNyZXQiOiJTRVNTSU9OIiwieWVhciI6IjIwMjQifQ","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2024", "3", System.fetch_env!("LB_SESSION"))
```

## test input

```elixir
test_input = """
xmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))
"""
```

## Token parser

```elixir
defmodule Token do
  defstruct [:literal, :type] 

  def parse(input) do
   input
    |> String.split(~r{(\n\r|\r\n)}, trim: true)
    |> Enum.flat_map(&tokenize/1)
    |> Enum.map(fn line -> 
        line
        |> String.replace("mul(", "")
        |> String.replace(")", "")
        |> String.split(",")
        |> Enum.map(&String.to_integer/1)
      end)
  end

  def tokenize(input) do
    ~r/mul\(\d+,\d+\)/
    |> Regex.scan(input)
    |> List.flatten()
  end
end

Token.parse(test_input)
```

## test parser

```elixir
ExUnit.start(autorun: false)

defmodule TokenTest do
  use ExUnit.Case, async: true

  @test_input """
  xmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))
  """

  test "row parse test" do
    assert Token.parse(@test_input) == [[2, 4], [5, 5], [11,8], [8, 5]]
  end
end

ExUnit.run()
```

## part 1

```elixir
defmodule PartOne do
  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
   input
   |> Token.parse()
   |> eval()
  end

  def eval(expression) do
   Enum.reduce(expression, 0, fn [a, b], acc -> 
      (a * b) + acc
    end) 
  end
end

# test_input
puzzle_input
|> PartOne.run()

```

## part 1 - test

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case

  @input puzzle_input
  
  test "part one" do
    assert PartOne.run(@input) == 187833789
  end
end

ExUnit.run()
```

## part 2

```elixir
defmodule PartTwo do
  def run(input) do
    input
    |> RowParser.parse()
    |> Enum.map(&evaluate_report/1)
    |> Enum.count(&(&1 == true))
  end

  def evaluate_report(report) do
    if valid_sequence?(report) do
      true
    else
      # Try removing each number to see if it makes sequence valid
      0..(length(report) - 1)
      |> Enum.any?(fn index ->
        report
        |> List.delete_at(index)
        |> valid_sequence?()
      end)
    end
  end

  def valid_sequence?(report) do
    diff = 
    report 
    |> Enum.chunk_every(2, 1, :discard)
    |> Enum.map(&diff/1)

    all_valid = Enum.all?(diff, &valid_diff?/1)

    cond do
      Enum.empty?(diff) -> false
        not all_valid -> false 
        Enum.all?(diff, &(&1 > 0)) -> true # all increasing
          Enum.all?(diff, &(&1 < 0)) -> true # all decreasing
          true -> false   
    end    
  end
  
  def diff([a, b]), do: b - a
  
  def valid_diff?(diff), do: abs(diff) in 1..3
end

# test_input
puzzle_input
|> PartTwo.run()
```

## part 2 - test

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case

   @input puzzle_input

  test "part two" do
    assert PartTwo.run(@input) == 621
  end
end

ExUnit.run()
```

<!-- livebook:{"offset":3244,"stamp":{"token":"XCP.z06RB0MlWelC1FD6f4uHC5F89QCfapI93-ipxpYM1AHcvZnytGUR1xO3jy9dvaHMIONsFIKsgTyEfW24cbup4kyiL6PaS-lEx1a3CFvZtSkIZgEEL8NlmBEBa0n6febV9L8","version":2}} -->

# Day 2

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Input

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiIyIiwic2Vzc2lvbl9zZWNyZXQiOiJTRVNTSU9OIiwieWVhciI6IjIwMjQifQ","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2024", "2", System.fetch_env!("LB_SESSION"))
```

## test input

```elixir
test_input = """
7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9
"""
```

## parser

```elixir
defmodule RowParser do
  def parse(input) do
   input
    |> String.split("\n", trim: true)
    |> Stream.map(&String.trim_leading/1)
    |> Stream.map(fn str -> 
      str
      |> String.split()
      |> Enum.map(&String.to_integer/1)
    end)
    |> Enum.to_list()
  end
end

RowParser.parse(test_input)
```

## test parser

```elixir
ExUnit.start(autorun: false)

defmodule RowParserTest do
  use ExUnit.Case, async: true

  @test_input """
  7 6 4 2 1
  1 2 7 8 9
  9 7 6 2 1
  1 3 2 4 5
  8 6 4 4 1
  1 3 6 7 9
  """

  test "row parse test" do
    assert RowParser.parse(@test_input) |> Enum.at(0) == [7, 6, 4, 2, 1]
    assert RowParser.parse(@test_input) |> Enum.at(5) == [1, 3, 6, 7, 9]
  end
end

ExUnit.run()
```

## part 1

```elixir
defmodule PartOne do
  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
   input
   |> RowParser.parse()
   |> Enum.map(&evaluate_report/1)
   |> Enum.count(&(&1 == true))
  end

  def evaluate_report(report) do
    levels = report
    |> Enum.chunk_every(2, 1, :discard)

    in_range = levels
    |> Enum.map(&diff/1)
    |> Enum.all?(&in_range/1)

    all_positive = levels
    |> Enum.map(&diff/1)
    |> Enum.all?(&positive/1)


    all_negative = levels
    |> Enum.map(&diff/1)
    |> Enum.all?(&negative/1)

    in_range && all_positive || in_range && all_negative
  end

  def diff([a, b]), do: a - b

  def in_range(n), do: abs(n) in 1..3

  def positive(n), do: n > 0
  
  def negative(n), do: n < 0
end

PartOne.run(test_input)

```

## part 1 - test

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case

  @input puzzle_input
  
  test "part one" do
    assert PartOne.run(@input) == 591
  end
end

ExUnit.run()
```

## part 2

```elixir
defmodule PartTwo do
  def solve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
  
  end
end

PartTwo.solve(puzzle_input)
```

## part 2 - test

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case
  import PartTwo

  test "part two" do
    assert run(puzzle_input) == 23529853
  end
end

ExUnit.run()
```

<!-- livebook:{"offset":2725,"stamp":{"token":"XCP.vxvc5Iu_lzoziLK-WWK1-i5t3nVbWVVR6kEglGKcm1-atT7UuB3kT8Pswc9lNfn4D-OPmCD3cpEKb1lG1hvYY9qKazAtJJpSXD6ryaEV51s6OaWGMk_JxyvcYUKqSA3N4XM","version":2}} -->

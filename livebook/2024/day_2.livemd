# Day 2

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Input

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiIyIiwic2Vzc2lvbl9zZWNyZXQiOiJTRVNTSU9OIiwieWVhciI6IjIwMjQifQ","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2024", "2", System.fetch_env!("LB_SESSION"))
```

## test input

```elixir
test_input = """
7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9
"""
```

## parser

```elixir
defmodule RowParser do
  def parse(input) do
   input
    |> String.split("\n", trim: true)
    |> Stream.map(&String.trim_leading/1)
    |> Stream.map(fn str -> 
      str
      |> String.split()
      |> Enum.map(&String.to_integer/1)
    end)
    |> Enum.to_list()
  end
end

RowParser.parse(test_input)
```

## test parser

```elixir
ExUnit.start(autorun: false)

defmodule RowParserTest do
  use ExUnit.Case, async: true

  @test_input """
  7 6 4 2 1
  1 2 7 8 9
  9 7 6 2 1
  1 3 2 4 5
  8 6 4 4 1
  1 3 6 7 9
  """

  test "row parse test" do
    assert RowParser.parse(@test_input) |> Enum.at(0) == [7, 6, 4, 2, 1]
    assert RowParser.parse(@test_input) |> Enum.at(5) == [1, 3, 6, 7, 9]
  end
end

ExUnit.run()
```

## part 1

```elixir
defmodule PartOne do
  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
   reports = RowParser.parse(input)

   reports
   |> Enum.map(&evaluate_report/1)
    
  end

  def evaluate_report(report) do
    report = Enum.chunk_every(report, 2, 1, :discard)
    dbg(report)
    report
    |> Enum.map(fn a, b -> abs(a - b) end)
    |> Enum.all?(&diff/1)
  end

  def diff(3), do: true
  def diff(2), do: true
  def diff(1), do: true
  def diff(_), do: false
end

PartOne.run(test_input)

```

## part 1 - test

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true

  @input puzzle_input
  
  test "part one" do
    assert PartOne.run(@input) == 1388114
  end
end

ExUnit.run()
```

## part 2

```elixir
defmodule PartTwo do
  def solve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
   %{left: left, right: right} = input
    |> RowParser.parse()

   f_map = Enum.frequencies(right) 

    left
    |> Enum.map(fn num -> 
      num * Map.get(f_map, num, 0)
    end)
    |> Enum.sum()
  end
end

PartTwo.solve(puzzle_input)
```

## part 2 - test

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @input puzzle_input
  @expected 23529853

  test "part two" do
    assert run(@input) == @expected
  end
end

ExUnit.run()
```

<!-- livebook:{"offset":2734,"stamp":{"token":"XCP.7F2xEQmS_YdXjKWvS68C2bnjqu22_znjjSEL7p5DqUfntN-LBsN6XyqgV4yotFzaPm2kBHPwHQHS61CfuzRio0MlD_tOCxaFrlVLf8QckgIWxXxWWtl6ceTzYmak1Ovkb-8","version":2}} -->
